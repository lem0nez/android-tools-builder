#!/usr/bin/env bash

# Copyright © 2020 Nikita Dudko. All rights reserved.
# Contacts: <nikita.dudko.95@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -eo pipefail
shopt -s nullglob globstar

VERSION='1.3.0'
BUILDER_HOME='.builder-home'
CONF_FILE='.builder.conf'
REPO_FILE='.repo.py'
BRANCH_PATTERN='android-[0-9]+\.[0-9]+\.[0-9]+_r[0-9]+'
DEFAULT_THREADS=4

# Key — pattern of the branch version, value — size in gigabytes.
declare -A MIN_RAM=(
  ['[0-9]{2}\..*']=12
  ['[1-9]\..*']=4
)
declare -A MIN_ROM=(
  ['[0-9]{2}\..*']=66
  ['[1-9]\..*']=55
)

AVAIL_TOOLS=(
  'aapt' 'aapt2'
  'aidl' 'zipalign'
)

AVAIL_ARCHS=(
  'arm' 'arm64'
  'mips' 'mips64'
  'x86' 'x86_64'
)

main() {
  funcs=(
    'check_cpu'
    'check_pkgs'
    'check_git'
    'download_repo'
    'set_branch'
    'check_ram'
    'check_rom'
    'repo_init'
    'repo_sync'
    'patch_files'
  )

  set_work_path "$@"

  while [[ -n $1 ]]; do
    case $1 in
      -o|--tools)
        set_tools "$2"
        shift ;;
      -a|--archs)
        set_archs "$2"
        shift ;;
      -b|--branch)
        if [[ -z $2 ]] || [[ ${2:0:1} == '-' ]]; then
          echo >&2 "Please, specify the branch name with $1 parameter!"
          exit 1
        fi

        SPECIFIED_BRANCH=$2
        shift ;;
      -t|--threads)
        set_threads "$2"
        shift ;;
      -h|--help)
        show_help
        exit 0 ;;
      -m|--hash)
        if [[ -z $2 ]]; then
          echo >&2 'Please, specify a path to Android.bp file!'
          exit 1
        elif [[ ! -f $2 ]]; then
          echo >&2 "File \"$2\" doesn't exist!"
          exit 1
        fi

        echo "$(calc_md5 "$2")  $2"
        # In order to parameter can be supplied many times.
        exit_after_processing=true
        shift ;;
      -*)
        echo >&2 "Unrecognized parameter: \"$1\"!"
        exit 1 ;;
    esac
    shift
  done

  if [[ $exit_after_processing == true ]]; then
    exit 0
  fi

  # Tools didn't specify in the parameters.
  if [[ -z $TOOLS ]]; then
    config_tools=$(get_conf 'TOOLS')

    if [[ -z $config_tools ]] || [[ $config_tools == 'all' ]]; then
      TOOLS=("${AVAIL_TOOLS[@]}")
    else
      read -ra TOOLS <<< "$config_tools"
    fi
  fi

  # Architectures didn't specify in the parameters.
  if [[ -z $ARCHS ]]; then
    config_archs=$(get_conf 'ARCHS')

    if [[ -z $config_archs ]] || [[ $config_archs == 'all' ]]; then
      ARCHS=("${AVAIL_ARCHS[@]}")
    else
      read -ra ARCHS <<< "$config_archs"
    fi
  fi

  step=$(get_conf 'LAST_STEP')

  # Branch specified in the parameters.
  if [[ -n $SPECIFIED_BRANCH ]]; then
    if [[ ! $SPECIFIED_BRANCH =~ (^$BRANCH_PATTERN$) ]]; then
      echo >&2 "Invalid branch name: \"$SPECIFIED_BRANCH\"!"
      exit 1
    fi

    if [[ -n $step ]]; then
      for (( s=0; s != ${#funcs[@]}; ++s )); do
        if [[ ${funcs[$s]} == 'set_branch' ]]; then
          if (( step > s )); then
            # shellcheck disable=SC2059
            printf 'The specified branch will be ignored,\n'`
                `'as branch already chosen and checked.\n'
          fi
          break
        fi
      done
    fi
  fi

  # Number of threads didn't specify in the parameters.
  if [[ -z $THREADS ]]; then
    config_threads=$(get_conf 'THREADS')

    if [[ -n $config_threads ]]; then
      THREADS=$config_threads
    else
      THREADS=$(nproc 2> /dev/null || echo "$DEFAULT_THREADS")
    fi
  fi

  printf ' ------ Builder configuration ------\n'`
      `'Work path: %s\n'`
      `'Tools: %s\n'`
      `'Architectures: %s\n'`
      `'Sync threads: %i\n'`
      `' ------ ------ ------- ------ ------\n' \
      "$WORK_PATH" "$(sed 's/ /, /g' <<< "${TOOLS[*]}")" \
      "$(sed 's/ /, /g' <<< "${ARCHS[*]}")" "$THREADS"

  gitconfig_path="$HOME/.gitconfig"
  # For storing files generated by programs.
  export HOME="$WORK_PATH/$BUILDER_HOME"

  if [[ ! -e $HOME ]]; then
    mkdir "$HOME"
  fi

  # Copy Git configuration.
  if [[ -f $gitconfig_path ]]; then
    cp "$gitconfig_path" "$HOME"
  fi

  if [[ -z $step ]]; then
    step=0
  fi

  # Start from last saved build step.
  while (( step != ${#funcs[@]} )); do
    ${funcs[$step]}
    step=$(( step + 1 ))
    set_conf 'LAST_STEP' "$step"
  done

  build_tools
  printf '\nAll done! Congratulations!\n'
  exit 0
}

# Function receive all script parameters.
set_work_path() {
  while [[ -n $1 ]]; do
    if [[ ${1::1} != '-' ]] && [[ ! $prev_arg =~ (^-([oabtm]|-[tabh])) ]]; then
      if [[ ! -d $1 ]]; then
        mkdir -p "$1"
      fi
      WORK_PATH=$(realpath "$1")
      break
    fi

    prev_arg=$1
    shift
  done

  if [[ -z $WORK_PATH ]]; then
    WORK_PATH=$(realpath ".")
  fi
}

show_help() {
  if installed_via_deb; then
    cmd='tools-builder'
  else
    cmd='./builder.sh'
  fi

  printf 'Android tools builder v%s.\n'`
      `'This script helps to build statically linked\n'`
      `'tools for different mobile architectures.\n'`
      `'\n'`
      `'Usage: %s [parameters] [path].\n'`
      `'If a path didn'"'"'t specify, the builder will use\n'`
      `'the current directory for storing the AOSP files.\n'`
      `'\n'`
      `'Parameters:\n'`
      `'  -o, --tools <list>          Set tools to build, separated with\n'`
      `'                            comma: %s\n'`
      `'                            or all. Default: all.\n'`
      `'  -a, --archs <list>          Set target architectures, separated with\n'`
      `'                            comma: %s\n'`
      `'                            or all. Default: all.\n'`
      `'  -b, --branch <name>         Set the branch to sync.\n'`
      `'  -t, --threads <number>      Set number of threads to use for syncing\n'`
      `'                            the repository. Default: number of\n'`
      `'                            processor cores or %i.\n'`
      `'  -h, --help                  Show help and exit.\n'`
      `'\n'`
      `'For maintainers:\n'`
      `'  -m, --hash <path>      Print MD5 hash of Android.bp file,\n'`
      `'                       excluding unnecessary characters and exit.\n'`
      `'                       (Can be supplied many times.)\n' \
      "$VERSION" "$cmd" "$(sed 's/ /, /g' <<< "${AVAIL_TOOLS[*]}")" \
      "$(sed 's/ /, /g' <<< "${AVAIL_ARCHS[*]}")" "$DEFAULT_THREADS"
}

# First parameter — variable, second — value.
set_conf() {
  conf_path="$WORK_PATH/$CONF_FILE"

  if [[ ! -e $conf_path ]]; then
    touch "$conf_path"
  fi

  if ! grep -qE "^[[:space:]]*$1[[:space:]]*=" < "$conf_path"; then
    # If variable didn't exist.
    echo "$1='$2'" >> "$conf_path"
  else
    sed -i -r "s/(^[[:space:]]*$1[[:space:]]*)=.*$/\\1='$2'/" "$conf_path"
  fi
}

# First parameter — variable. Return value.
get_conf() {
  conf_path="$WORK_PATH/$CONF_FILE"

  if [[ -f $conf_path ]]; then
    while IFS='=' read -r var val; do
      if [[ $var == "$1" ]]; then
        sed -r "s/^[[:space:]]*(\"|')//; s/(\"|')[[:space:]]*$//" <<< "$val"
        return
      fi
    done < "$conf_path"
  fi
}

# First parameter — list of tools separated with comma.
set_tools() {
  tools=$1
  IFS=',' read -ra choosed_tools <<< "$tools"

  if [[ -z $tools ]]; then
    echo >&2 'Please, specify tools separated with comma!'
    exit 1
  elif [[ $tools == 'all' ]]; then
    TOOLS=("${AVAIL_TOOLS[@]}")
    set_conf 'TOOLS' "${TOOLS[*]}"
    return
  fi

  for t in "${choosed_tools[@]}"; do
    if [[ " ${TOOLS[*]} " =~ ( $t ) ]]; then
      # If tool already specified.
      continue
    elif [[ " ${AVAIL_TOOLS[*]} " =~ ( $t ) ]]; then
      TOOLS+=("$t")
    else
      echo >&2 "Unrecognized tool: \"$t\"!"
      exit 1
    fi
  done

  set_conf 'TOOLS' "${TOOLS[*]}"
}

# First parameter — list of architectures separated with comma.
set_archs() {
  archs=$1
  IFS=',' read -ra choosed_archs <<< "$archs"

  if [[ -z $archs ]]; then
    echo >&2 'Please, specify architectures separated with comma!'
    exit 1
  elif [[ $archs == 'all' ]]; then
    ARCHS=("${AVAIL_ARCHS[@]}")
    set_conf 'ARCHS' "${ARCHS[*]}"
    return
  fi

  for a in "${choosed_archs[@]}"; do
    if [[ " ${ARCHS[*]} " =~ ( $a ) ]]; then
      # If architecture already specified.
      continue
    elif [[ " ${AVAIL_ARCHS[*]} " =~ ( $a ) ]]; then
      ARCHS+=("$a")
    else
      echo >&2 "Unrecognized architecture: \"$a\"!"
      exit 1
    fi
  done

  set_conf 'ARCHS' "${ARCHS[*]}"
}

# First parameter — number of threads.
set_threads() {
  if [[ ! $1 =~ (^[0-9]$) ]] || (( $1 < 1 )); then
    echo >&2 "Number of threads should be an integer, which greater than 0!"
    exit 1
  else
    THREADS=$1
  fi

  set_conf 'THREADS' "$1"
}

# Return 0 if the script installed via a .deb package, otherwise 1.
installed_via_deb() {
  if [[ $(dirname "$(readlink -f "${BASH_SOURCE[0]}")") == /usr/bin ]]; then
    return 0
  else
    return 1
  fi
}

check_cpu() {
  echo '> Checking CPU...'

  if ! grep -qiE '^Flags:.*[[:space:]]lm([[:space:]]|$)' '/proc/cpuinfo' && \
      [[ $(getconf 'LONG_BIT' 2> /dev/null) != '64' ]] && ! grep -qiE \
      '^Architecture:[[:space:]]*x86_64' <<< "$(lscpu 2> /dev/null)"; then

    echo >&2 'Need a 64-bit machine! Build not possible!'
    exit 1
  fi
}

check_pkgs() {
  required_pkgs=(
    'bison' 'build-essential' 'curl' 'flex' 'g++-multilib' 'gcc-multilib'
    'git' 'gnupg' 'gperf' 'lib32ncurses5-dev' 'lib32z1-dev'
    'libc6-dev-i386' 'libgl1-mesa-dev' 'libx11-dev' 'libxml2-utils'
    'python2.7' 'ruby' 'unzip' 'x11proto-core-dev' 'xsltproc' 'zip' 'zlib1g-dev'
  )

  # Alternative packages names with regex support.
  declare -A alt_pkgs_names=(
    [g++-multilib]='g\+\+-[0-9]+-multilib'
  )

  echo '> Checking required packages...'

  if ! pkgs=$(dpkg --get-selections 2> /dev/null); then
    printf >&2 "Can't get list of the installed packages!\\n"`
      `"Make sure that you have following packages: %s.\\n"`
      `"Continue?\\n" "$(sed 's/ /, /g' <<< "${required_pkgs[*]}")"

    while read -rp 'Yes/No> ' answer; do
      if ! grep -qiE '^(y|yes)$' <<< "$answer"; then
        printf '\nBuild stopped.'
        exit 1
      else
        break
      fi
    done
  else
    for p in "${required_pkgs[@]}"; do
      if ! grep -qE "^$p([[:space:]]|:)" <<< "$pkgs"; then
        if [[ -z ${alt_pkgs_names[$p]} ]] || \
            ! grep -qE "^${alt_pkgs_names[$p]}([[:space:]]|:)" <<< "$pkgs"; then
          not_installed_pkgs+=("$p")
        fi
      fi
    done

    if [[ -n ${not_installed_pkgs[*]} ]]; then
      printf >&2 "Following packages didn't install: %s.\\n"`
          `"Continue build without this packages (may lead to fail)?\\n"`
          ` "$(sed 's/ /, /g' <<< "${not_installed_pkgs[*]}")"

      while read -rp 'Yes/No> ' answer; do
        if ! grep -qiE '^(y|yes)$' <<< "$answer"; then
          # shellcheck disable=SC2059
          printf 'Tip: on Debian-based distributions you can\n'`
              `'install required packages via "sudo apt install" command.\n'`
              `'\n'`
              `'Build stopped.\n'
          exit 1
        else
          break
        fi
      done
    fi
  fi
}

check_git() {
  # Git configurations.
  vars=('user.name' 'user.email')
  tip='Tip: you can change Git configuration by executing\n'`
      `'"git config --global <variable> <value>".\n'`
      `'\n'`
      `'Build stopped.\n'

  echo '> Checking Git configuration...'

  if ! config=$(git config -l 2> /dev/null); then
    printf >&2 "Can't check Git configuration!\\n"`
        `"Make sure that following variables set: %s.\\n"`
        `"Continue build?\\n" "$(sed 's/ /, /g' <<< "${vars[*]}")"

    while read -rp 'Yes/No> ' answer; do
      if ! grep -qiE '^(y|yes)$' <<< "$answer"; then
        printf '%s' "$tip"
        exit 1
      else
        return
      fi
    done
  fi

  for v in "${vars[@]}"; do
    # shellcheck disable=SC1087
    if ! grep -qE "^[[:space:]]*$v[[:space:]]*=[[:space:]]*.+$" \
        <<< "$config"; then
      unset_vars+=("$v")
    fi
  done

  if [[ -n ${unset_vars[*]} ]]; then
    printf >&2 "Following configuration variables didn't set: %s.\\n"`
        `"Continue build without them (not recommended)?\\n" \
        "$(sed 's/ /, /g' <<< "${vars[*]}")"

    while read -rp 'Yes/No> ' answer; do
      if ! grep -qiE '^(y|yes)$' <<< "$answer"; then
        printf '%s' "$tip"
        exit 1
      else
        return
      fi
    done
  fi
}

download_repo() {
  repo_path="$WORK_PATH/$REPO_FILE"
  echo '> Downloading repo script...'

  if ! curl -o "$repo_path" -sL \
      'https://storage.googleapis.com/git-repo-downloads/repo'; then
    echo >&2 "Couldn't get the repo script!"
    exit 1
  fi
  chmod +x "$repo_path"
}

set_branch() {
  if [[ -z $SPECIFIED_BRANCH ]]; then
    echo '> Retrieving a latest branch name...'
  else
    echo '> Checking branch...'
  fi

  # Get list of all branches from newest to older.
  if ! branches=$(git ls-remote -h \
      'https://android.googlesource.com/platform/manifest' 2> /dev/null |\
      sed -r "s#^.+/##g; /^$BRANCH_PATTERN$/!d" | sort -rV); then

    if [[ -z $SPECIFIED_BRANCH ]]; then
      echo >&2 "Couldn't get a list of branches! "`
          `"Please, specify the branch manually."
      exit 1
    else
      echo >&2 "Couldn't check the branch name! "`
          `"It may lead to fail while syncing."
      branch=$SPECIFIED_BRANCH
    fi
  else
    if [[ -z $SPECIFIED_BRANCH ]]; then
      branch=$(echo "$branches" | awk 'NR==1')
      echo "Latest branch: $branch."
    else
      if ! grep -qE "^$SPECIFIED_BRANCH$" <<< "$branches"; then
        printf >&2 "\\nInvalid branch: %s! Please, specify another one or\\n"`
            `"don't specify it to automatically retrieve a name "`
            `"of the latest branch.\\n" "$SPECIFIED_BRANCH"
        exit 1
      else
        branch=$SPECIFIED_BRANCH
      fi
    fi
  fi
  set_conf 'BRANCH' "$branch"
}

check_ram() {
  # Rows of /proc/meminfo file.
  rows=('MemTotal' 'SwapTotal')
  echo '> Checking RAM size...'

  for r in "${rows[@]}"; do
    row_size=$(grep -E "^$r:" < /proc/meminfo | awk '{print $2}')
    total_size=$(( total_size + (row_size / 1024) ))
  done

  # Convert to gigabytes.
  total_size=$(( total_size / 1024 + 1 ))

  branch=$(get_conf 'BRANCH')
  for p in "${!MIN_RAM[@]}"; do
    if [[ $branch =~ (^android-$p$) ]]; then
      min_ram=${MIN_RAM[$p]}
      break
    fi
  done

  if (( total_size < min_ram )); then
    printf >&2 'To build tools recommended have at least %i GB of RAM,\n'`
        `'you have only %i GB. Ignore it and continue\n'`
        `'(may lead to fail while compiling tools)?\n' \
        "$min_ram" "$total_size"

    while read -rp 'Yes/No> ' answer; do
      if ! grep -qiE '^(y|yes)$' <<< "$answer"; then
        printf `
            `'Tip: you can make a SWAP file by executing this commands via root:\n'`
            `'  # dd if=/dev/zero of=swapfile bs=1048576 count=%i\n'`
            `'  # mkswap swapfile\n'`
            `'  # swapon swapfile\n'`
            `'\n'`
            `'Build stopped.\n' "$(( (min_ram - total_size) * 1024 ))"
        exit 1
      else
        break
      fi
    done
  fi
}

check_rom() {
  echo '> Checking free space...'

  # Show in gigabytes and exclude a header.
  avail_space=$(df -B $(( 1024 ** 3 )) --output=avail "$WORK_PATH" | awk 'NR==2')

  branch=$(get_conf 'BRANCH')
  for p in "${!MIN_ROM[@]}"; do
    if [[ $branch =~ (^android-$p$) ]]; then
      min_rom=${MIN_ROM[$p]}
      break
    fi
  done

  if (( avail_space < min_rom )); then
    printf >&2 'You have only %i GB of the available space, but need %i GB\n'`
        `'for storing files. Ignore it and continue anyway\n'`
        `'(may lead to fail while syncing or building tools)?\n' \
        "$avail_space" "$min_rom"

    while read -rp 'Yes/No> ' answer; do
      if ! grep -qiE '^(y|yes)$' <<< "$answer"; then
        # shellcheck disable=SC2059
        printf 'Tip: you can free some disk space by\n'`
            `'removing files from ~/.cache or /tmp.\n'`
            `'\n'`
            `'Build stopped.\n'
        exit 1
      else
        break
      fi
    done
  fi
}

repo_init() {
  echo '> Initializing...'

  cd "$WORK_PATH"
  python2.7 "$REPO_FILE" init -u \
      'https://android.googlesource.com/platform/manifest' \
      -b "$(get_conf 'BRANCH')" --depth=1 --no-clone-bundle --no-tags
}

repo_sync() {
  echo '> Syncing (it take long)...'

  cd "$WORK_PATH"
  python2.7 "$REPO_FILE" sync -cqj"$THREADS" --no-clone-bundle --no-tags
}

# Calculate MD5 of a Android.bp file, excluding unnecessary characters.
# First parameter — a path to the file. Return MD5 hash.
calc_md5() {
  md5sum <<< "$(sed -r \
      's#(^[[:space:]]*//.*|[[:space:]]*)$##g; /^[[:space:]]*$/d' "$1")" | \
      awk '{print $1}'
}

patch_files() {
  # Dependencies on libraries or tools, located in supplied paths.
  declare -A paths_deps=(
    [build/tools/zipalign]='zipalign'
    [frameworks/base/libs/androidfw]='aapt,aapt2'
    [frameworks/base/tools/aapt]='aapt'
    [frameworks/base/tools/aapt2]='aapt2'
    [system/tools/aidl]='aidl'
  )

  echo '> Patching build modules...'

  if installed_via_deb; then
    patches_path='/usr/share/android-tools-builder/patches'

    if [[ ! -d $patches_path ]]; then
      echo >&2 "A folder with patches doesn't exist! "`
          `"Try to reinstall the package."
      exit 1
    fi
  else
    patches_path="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/patches"

    if [[ ! -d $patches_path ]]; then
      # shellcheck disable=SC2059
      printf >&2 "Can't get patches! Make sure that \"patches\"\\n"`
          `"folder locate in the directory with script.\\n"
      exit 1
    fi
  fi

  # Get paths relative directories.
  IFS=$'\r' read -ra paths <<< "$(find "$patches_path" -type 'f' -name '*.bp' | \
      sed -r "s#^$patches_path/##; s:/*[^/]+$::; s:^$:.:" | \
      sort -u | tr '\n' '\r')"

  # Tools which won't build as some dependencies didn't patch.
  IFS=',' read -ra exclude_tools <<< "$(get_conf 'EXCLUDE_TOOLS')"

  for p in "${paths[@]}"; do
    # Dependencies for the current tool.
    IFS=',' read -ra deps <<< "${paths_deps[$p]}"

    if [[ ! -e $WORK_PATH/$p/Android.bp ]]; then
      echo >&2 "$p/Android.bp didn't exist! Skipping..."
      exclude_tools+=("$deps")
      continue
    fi

    md5=$(calc_md5 "$WORK_PATH/$p/Android.bp")

    if [[ -e $patches_path/$p/$md5.bp ]]; then
      cat "$patches_path/$p/$md5.bp" > "$WORK_PATH/$p/Android.bp"
      status='patched'
    else
      status='not patched'
      some_files_not_patched=true
      exclude_tools+=("$deps")
    fi

    echo "$p/Android.bp. MD5: $md5, status: $status."
  done

  if [[ $some_files_not_patched == true ]]; then
    # Remove duplicates.
    read -ra exclude_tools <<< \
        "$(tr "$IFS" '\n' <<< "${exclude_tools[*]}" | sort -u | tr '\n' "$IFS")"

    printf >&2 \
        "\\nFollowing tools won't build as some dependencies didn't patch:\\n"`
        `"%s. Please, report about the not patched dependencies\\n"`
        `"on email: nikita.dudko.95@gmail.com, or GitHub repository:\\n"`
        `"https://github.com/lem0nez/android-tools-builder.\\n"`
        `"Also specify your current branch: %s.\\n\\n" \
        "$(sed 's/ /, /g' <<< "${exclude_tools[*]}")" "$(get_conf 'BRANCH')"

    set_conf 'EXCLUDE_TOOLS' "$(tr ' ' ',' <<< "${exclude_tools[*]}")"
  fi
}

build_tools() {
  declare -A tools_paths=(
    [aapt]='frameworks/base/tools/aapt'
    [aapt2]='frameworks/base/tools/aapt2'
    [aidl]='system/tools/aidl'
    [zipalign]='build/tools/zipalign'
  )

  # Output binaries names (implicitly add "_target" postfix).
  declare -A out_bins=(
    [aapt]='aapt'
    [aapt2]='aapt2'
    [aidl]='aidl,aidl-cpp'
    [zipalign]='zipalign'
  )

  # Commands to build tools.
  declare -A build_cmds=(
    [aapt]='mm'
    [aapt2]='mma'
    [aidl]='mma'
    [zipalign]='mm'
  )

  echo '> Starting build...'
  out_path="$WORK_PATH/out/$(get_conf 'BRANCH')"

  IFS=',' read -ra exclude_tools <<< "$(get_conf 'EXCLUDE_TOOLS')"

  if [[ -n ${exclude_tools[*]} ]]; then
    echo "Excluded tools: $(sed 's/ /, /g' <<< "${exclude_tools[*]}")."
  fi

  cd "$WORK_PATH"
  # shellcheck disable=SC1091
  . build/envsetup.sh > /dev/null

  for a in "${ARCHS[@]}"; do
    unset BUILD_TOOLS

    for t in "${TOOLS[@]}"; do
      if [[ " ${exclude_tools[*]} " =~ ( $t ) ]]; then
        continue
      fi

      IFS=',' read -ra bins <<< "${out_bins[$t]}"
      for b in "${bins[@]}"; do
        if [[ ! -e $out_path/$t/$a/$b ]]; then
          BUILD_TOOLS+=("$t")
          break
        fi
      done
    done

    if [[ -z ${BUILD_TOOLS[*]} ]]; then
      # If all tools for current architecture is built.
      continue
    fi

    echo "> Switching architecture to $a..."
    lunch "aosp_$a-eng" > /dev/null

    for t in "${BUILD_TOOLS[@]}"; do
      echo "> Building $t for $a..."
      cd "${tools_paths[$t]}"
      LANG='en_US.UTF-8' LC_ALL=C "${build_cmds[$t]}"
      cd "$WORK_PATH"

      mkdir -p "$out_path/$t/$a"
      IFS=',' read -ra bins <<< "${out_bins[$t]}"

      # An output directory name.
      if [[ $a == 'arm' ]]; then
        dir='generic'
      else
        dir="generic_$a"
      fi

      for b in "${bins[@]}"; do
        mv "$WORK_PATH/out/target/product/$dir/system/bin/${b}_target" \
            "$out_path/$t/$a/$b"
      done
      echo "> $t for $a is built! Binaries location: $out_path/$t/$a."
    done
  done
}

main "$@"
